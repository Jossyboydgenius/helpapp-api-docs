{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "description": "Test connection",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API is healthy and running",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Welcome to Help App Backend Service! ðŸš€"
                }
              }
            }
          }
        },
        "summary": "Health Check",
        "tags": [
          "Health Check"
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "description": "Create a new user account. Clients can book services, providers can offer services.",
        "operationId": "AuthController_signup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "clxyz123abc"
                        },
                        "email": {
                          "type": "string",
                          "example": "john@example.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "userType": {
                          "type": "string",
                          "example": "CLIENT"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "email must be a valid email",
                        "name should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User with email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "User with this email already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Register as a client or provider",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Login with email and password to receive an access token.",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "clxyz123abc"
                        },
                        "email": {
                          "type": "string",
                          "example": "john@example.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "userType": {
                          "type": "string",
                          "example": "CLIENT"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Authenticate and return JWT",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "description": "Retrieve the current authenticated user profile information.",
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clxyz123abc"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@example.com"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "userType": {
                      "type": "string",
                      "example": "CLIENT"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get logged-in user's profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/services": {
      "get": {
        "description": "Publicly accessible endpoint to retrieve all service types offered on the platform.",
        "operationId": "ServicesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "clxyz123service"
                      },
                      "name": {
                        "type": "string",
                        "example": "Plumbing"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-06-18T00:00:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2024-06-18T00:00:00.000Z"
                      }
                    }
                  },
                  "example": [
                    {
                      "id": "clxyz123service",
                      "name": "Plumbing",
                      "createdAt": "2024-06-18T00:00:00.000Z",
                      "updatedAt": "2024-06-18T00:00:00.000Z"
                    },
                    {
                      "id": "clxyz456service",
                      "name": "Electrical Work",
                      "createdAt": "2024-06-18T00:00:00.000Z",
                      "updatedAt": "2024-06-18T00:00:00.000Z"
                    },
                    {
                      "id": "clxyz789service",
                      "name": "Cleaning",
                      "createdAt": "2024-06-18T00:00:00.000Z",
                      "updatedAt": "2024-06-18T00:00:00.000Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "List all available services",
        "tags": [
          "Services"
        ]
      },
      "post": {
        "description": "Admin only endpoint to create new service categories. Requires authentication.",
        "operationId": "ServicesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clxyz123service"
                    },
                    "name": {
                      "type": "string",
                      "example": "Garden Maintenance"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Service name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Service name already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new service type",
        "tags": [
          "Services"
        ]
      }
    },
    "/api/bookings": {
      "post": {
        "description": "Client creates a booking for a specific service. The booking will be in PENDING status until a provider accepts it.",
        "operationId": "BookingsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clxyz123booking"
                    },
                    "serviceId": {
                      "type": "string",
                      "example": "clxyz123service"
                    },
                    "clientId": {
                      "type": "string",
                      "example": "clxyz123client"
                    },
                    "providerId": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "status": {
                      "type": "string",
                      "example": "PENDING"
                    },
                    "scheduledDate": {
                      "type": "string",
                      "example": "2024-07-01T10:00:00.000Z"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-06-18T00:00:00.000Z"
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "clxyz123service"
                        },
                        "name": {
                          "type": "string",
                          "example": "Plumbing"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "serviceId should not be empty",
                        "scheduledDate must be a valid ISO 8601 date string"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new booking",
        "tags": [
          "Bookings"
        ]
      },
      "get": {
        "description": "Retrieve all bookings for the authenticated user. Clients see their created bookings, providers see bookings assigned to them.",
        "operationId": "BookingsController_findUserBookings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "clxyz123booking"
                      },
                      "serviceId": {
                        "type": "string",
                        "example": "clxyz123service"
                      },
                      "clientId": {
                        "type": "string",
                        "example": "clxyz123client"
                      },
                      "providerId": {
                        "type": "string",
                        "example": "clxyz456provider"
                      },
                      "status": {
                        "type": "string",
                        "example": "ACCEPTED"
                      },
                      "scheduledDate": {
                        "type": "string",
                        "example": "2024-07-01T10:00:00.000Z"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2024-06-18T00:00:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2024-06-18T01:00:00.000Z"
                      },
                      "service": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "clxyz123service"
                          },
                          "name": {
                            "type": "string",
                            "example": "Plumbing"
                          }
                        }
                      },
                      "client": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "clxyz123client"
                          },
                          "name": {
                            "type": "string",
                            "example": "John Doe"
                          },
                          "email": {
                            "type": "string",
                            "example": "john@example.com"
                          }
                        }
                      },
                      "provider": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "clxyz456provider"
                          },
                          "name": {
                            "type": "string",
                            "example": "Jane Smith"
                          },
                          "email": {
                            "type": "string",
                            "example": "jane@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user bookings",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/api/bookings/{id}": {
      "patch": {
        "description": "Provider updates the status of a booking. Valid transitions: PENDINGâ†’ACCEPTED/REJECTED, ACCEPTEDâ†’COMPLETED/CANCELLED.",
        "operationId": "BookingsController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "example": "clxyz123booking",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookingStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clxyz123booking"
                    },
                    "status": {
                      "type": "string",
                      "example": "ACCEPTED"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-06-18T01:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid status transition",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid status transition"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - only assigned provider can update booking",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Only assigned provider can update this booking"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update booking status",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/api/reviews": {
      "post": {
        "description": "Client submits a review and rating for a completed booking. Only the client who made the booking can review it.",
        "operationId": "ReviewsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clxyz123review"
                    },
                    "rating": {
                      "type": "number",
                      "example": 5
                    },
                    "comment": {
                      "type": "string",
                      "example": "Excellent service! Very professional and timely."
                    },
                    "bookingId": {
                      "type": "string",
                      "example": "clxyz123booking"
                    },
                    "clientId": {
                      "type": "string",
                      "example": "clxyz123client"
                    },
                    "providerId": {
                      "type": "string",
                      "example": "clxyz456provider"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2024-06-18T02:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2024-06-18T02:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors or booking not completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "rating must be between 1 and 5",
                        "bookingId should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - only booking client can create review",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Only the booking client can create a review"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Booking not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Review already exists for this booking",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Review already exists for this booking"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a review for completed service",
        "tags": [
          "Reviews"
        ]
      }
    }
  },
  "info": {
    "title": "Help App API",
    "description": "A comprehensive service-based platform that connects clients with service providers for on-demand tasks such as plumbing, cleaning, electrical work, and more.\n\n**Core Features:**\n- User Management: Client and provider registration/authentication\n- Service Catalog: Browse and manage service types  \n- Booking System: Create, manage, and track service bookings\n- Review System: Rate and review completed services\n- JWT Authentication: Secure API access with role-based permissions\n\n**Authentication:** Most endpoints require authentication. Use the \"Authorize\" button above to add your JWT token.\n\n**User Types:** CLIENT (can book services and leave reviews) | PROVIDER (can accept bookings and receive reviews)\n\n**Booking Status Flow:** PENDING â†’ ACCEPTED/REJECTED â†’ COMPLETED/CANCELLED",
    "version": "1.0.0",
    "contact": {
      "name": "Awe Joseph Olaitan",
      "url": "https://github.com/Jossyboydgenius/Backend-test.git",
      "email": "awejosepholaitan@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Health Check",
      "description": "API health verification endpoints"
    },
    {
      "name": "Authentication",
      "description": "User registration, login, and profile management"
    },
    {
      "name": "Services",
      "description": "Service type management and discovery"
    },
    {
      "name": "Bookings",
      "description": "Booking creation, management, and status updates"
    },
    {
      "name": "Reviews",
      "description": "Service rating and review system"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development Server"
    },
    {
      "url": "https://api.helpapp.com",
      "description": "Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "description": "Enter your JWT token to access protected endpoints"
      }
    },
    "schemas": {
      "UserType": {
        "type": "string",
        "enum": [
          "CLIENT",
          "PROVIDER"
        ],
        "description": "Type of user account - CLIENT for service consumers, PROVIDER for service providers"
      },
      "SignupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "John Doe",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "description": "Valid email address for user authentication",
            "example": "john@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "Secure password for user account (minimum 6 characters)",
            "example": "password123",
            "minLength": 6,
            "maxLength": 50
          },
          "userType": {
            "description": "Type of user account - CLIENT for service consumers, PROVIDER for service providers",
            "example": "CLIENT",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserType"
              }
            ]
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "userType"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Registered email address",
            "example": "john@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123",
            "minLength": 6
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateServiceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the service type (must be unique)",
            "example": "Garden Maintenance",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateBookingDto": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "ID of the service being booked",
            "example": "clxyz123service",
            "format": "uuid"
          },
          "providerId": {
            "type": "string",
            "description": "Optional specific provider ID (if not provided, any available provider can accept)",
            "example": "clxyz456provider",
            "format": "uuid"
          },
          "scheduledDate": {
            "type": "string",
            "description": "Preferred date and time for the service (ISO 8601 format)",
            "example": "2024-07-01T10:00:00Z",
            "format": "date-time"
          }
        },
        "required": [
          "serviceId",
          "scheduledDate"
        ]
      },
      "BookingStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACCEPTED",
          "REJECTED",
          "COMPLETED",
          "CANCELLED"
        ],
        "description": "New status for the booking. Valid transitions: PENDINGâ†’ACCEPTED/REJECTED, ACCEPTEDâ†’COMPLETED/CANCELLED"
      },
      "UpdateBookingStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "description": "New status for the booking. Valid transitions: PENDINGâ†’ACCEPTED/REJECTED, ACCEPTEDâ†’COMPLETED/CANCELLED",
            "example": "ACCEPTED",
            "allOf": [
              {
                "$ref": "#/components/schemas/BookingStatus"
              }
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateReviewDto": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "description": "Rating for the service (1-5 stars)",
            "example": 5,
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Optional written review comment",
            "example": "Excellent service! Very professional and timely.",
            "maxLength": 500
          },
          "bookingId": {
            "type": "string",
            "description": "ID of the completed booking being reviewed",
            "example": "clxyz789booking",
            "format": "uuid"
          },
          "providerId": {
            "type": "string",
            "description": "ID of the service provider being reviewed",
            "example": "clxyz456provider",
            "format": "uuid"
          }
        },
        "required": [
          "rating",
          "bookingId",
          "providerId"
        ]
      }
    }
  }
}
